{
  "swagger": "2.0",
  "info": {
    "description": "This API handles all of the standard CRUD actions in managing a virtual shopping cart.",
    "version": "2.1.0",
    "title": "Shopping Cart API"
  },
  "host": "prod.bigriverbooks.com",
  "basePath": "/ShoppingCartAPI/v2",
  "tags": [
    {
      "name": "Shopping Cart",
      "description": "Cart management"
    },
    {
      "name": "User",
      "description": "User management"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/cart": {
      "get": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Retrieve all items",
        "description": "Retrieve a list of all the items pending in your cart.",
        "operationId": "getAllItems",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "202": {
            "description": "Successful Request - Retrieving items in Cart",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Add new item in the cart",
        "description": " User indicates the Shopping Service to add a new item in his cart",
        "operationId": "addItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "quantity of items to buy",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "price",
            "in": "query",
            "description": "Price of each item",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "discount",
            "in": "query",
            "description": "Discount on percentage rate",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request - Item(s) added to Cart"
          },
          "405": {
            "description": "Failed Request - Invalid Inputs"
          }
        }
      },
      "delete": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Reset your cart",
        "description": "Deletes all items in an existing cart.",
        "operationId": "deleteAll",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "202": {
            "description": "Successful request - Cart has been reset."
          },
          "401": {
            "description": "Unauthorized to make such call."
          },
          "500": {
            "description": "Error while trying to reset. Try again."
          }
        }
      }
    },
    "/cart/{itemId}": {
      "get": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Retrieve an Item",
        "description": "Retrieves a Item object with relevant info about a certain item in a cart.",
        "operationId": "getItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "description": "Id of an users' cart",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Id of item to return",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request - Item Retrieved",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "404": {
            "description": "Item not found"
          },
          "405": {
            "description": "Failed request - item or cart not found"
          }
        }
      },
      "put": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Update item",
        "description": "Allows you to update one of the following fields in an item: quantity, price, discount. One should be updated at a time",
        "operationId": "updateItem",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of item to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "field",
            "in": "query",
            "description": "field to be updated (quantity/price/discount)",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "New value of the previous field",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "202": {
            "description": "Sucessful Request - Item Updated"
          },
          "404": {
            "description": "Error - Item not found"
          },
          "405": {
            "description": "Wrong input",
            "schema": {
              "type": "string",
              "example": "Cannot add that much quantity! Not enough in stock."
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Delete an item",
        "description": "Deletes an item from the current cart.",
        "operationId": "deleteItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "description": "Id of an users' cart",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Id of item to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Request - Item deleted"
          },
          "404": {
            "description": "Error - Item not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get All Users",
        "description": "Gets all currently registered users",
        "operationId": "getUsersList",
        "parameters": [],
        "responses": {
          "202": {
            "description": "OK - Retrieving User List",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add new User",
        "operationId": "newUser",
        "parameters": [
          {
            "name": "age",
            "in": "query",
            "required": true,
            "type": "number"
          },
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request - User added"
          },
          "405": {
            "description": "Error while trying to add user"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user info by Id",
        "operationId": "getUserInfo",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Error - User Does Not Exist"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "Allows you to update one of the following fields in an user: username, password, email. One should be updated at a time",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ofuser to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "field",
            "in": "query",
            "description": "field to be updated (username/password/email)",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "New value of the previous field",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Request - User Updated"
          },
          "404": {
            "description": "Error - User Does Not Exist"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete an user",
        "description": "Delete an user indicating his ID",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Request - User Deleted"
          },
          "404": {
            "description": "Error - User Does Not Exist"
          }
        }
      }
    }
  },
  "definitions": {
    "Item": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 12
        },
        "name": {
          "type": "string",
          "example": "Adidas 270 Sneaker"
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "example": 2
        },
        "price": {
          "type": "number",
          "format": "double",
          "example": 27
        },
        "discount": {
          "type": "number",
          "format": "double",
          "example": 2.7
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "cartId": {
          "type": "integer",
          "format": "int32",
          "example": 7
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 27
        },
        "firstName": {
          "type": "string",
          "example": "Facundo"
        },
        "lastName": {
          "type": "string",
          "example": "JK"
        },
        "userName": {
          "type": "string",
          "example": "JKLabs"
        },
        "password": {
          "type": "string",
          "example": "JK95"
        },
        "email": {
          "type": "string",
          "example": "facu@yahoo.com"
        }
      }
    }
  }
}
